#!/bin/bash -e
DEP=${DEP:-yes}
CC=gcc
cstd='-std=gnu99'
CFLAGS="-Wall -Wextra -pedantic $cstd -pthread -fPIC $*"
hasmidi=no
libs='sdl2 gl openal'
sf_dir=
embedfont=yes
# remove auto generated files
rm -f font.c
for i in "$@"; do
	case "$i" in
	--enable-midi)
		shift 1
		libs="$libs fluidsynth"
		hasmidi=yes
		;;
	--sf-dir)
		shift 1
		sf_dir="$1"
		shift 1
		;;
	--)
		break;;
	esac
done
for i in "$@"; do
	case "$i" in
	-DNO_EMBED_FONT)
		embedfont=no
		;;
	esac
done
if [ "$embedfont" == yes ]; then
	if ! hash xxd 2>/dev/null; then
		echo Need xxd to embed font 2>&1
		exit 1
	fi
	xxd -i font.png >font.c
	length="$(tail -n1 font.c | sed -e 's/[^0-9]//g')"
	cat <<-EOF >>font.c

	unsigned char *font_png_start =  font_png;
	unsigned char *font_png_end   = &font_png[$length];
	EOF
fi
CFLAGS="$CFLAGS $*"
if ! hash pkg-config 2>/dev/null; then
	echo "pkg-config is missing" 1>&2
	exit 1
fi
CFLAGS="$CFLAGS $(pkg-config --cflags $libs)"
LDLIBS="$(pkg-config --libs $libs)"
LLIBS='-lSDL2_image -lSDL2_mixer -lpthread -lm'
cat <<'EOF'>.gitignore
# cc
*.o
*.a
*.so
# generated by configure
.gitignore
Makefile
_build.h
EOF
if [ "$embedfont" == yes ]; then
	echo 'font.c' >>.gitignore
fi
# build configuration generation
cat <<EOF >_build.h
#ifndef _GENIE_BUILD_H
#define _GENIE_BUILD_H

EOF
if ! hash git 2>/dev/null; then
	echo 'No git available, falling back to defaults' 2>&1
	echo 'configuration is taunted' 2>&1
cat <<EOF >>_build.h
#define GENIE_GIT_SHA "??"
#define GENIE_CFG_TAUNTED 1
EOF
else
cat <<EOF >>_build.h
#define GENIE_GIT_SHA "$(git rev-parse HEAD)"
#define GENIE_CFG_TAUNTED 0
EOF
fi
if [ "$hasmidi" = yes ]; then
	echo '#define GENIE_HAS_MIDI 1' >>configure.h
fi
if [ ! -z "$sf_dir" ]; then
	printf '#define GENIE_MIDI_SF_DIR "%s"' "$sf_dir" >>configure.h
fi
cat <<EOF >>_build.h

#define GENIE_BUILD_OPTIONS "$*"
#define GENIE_GIT_ORIGIN "https://www.github.com/FolkertVanVerseveld/aoe.git"

#endif
EOF
cat <<EOF >Makefile
.PHONY: default clean

CC=$CC
CFLAGS=$CFLAGS
LDLIBS=$LDLIBS $LLIBS

EOF

printf "OBJECTS=" >>Makefile
FILES=$(find . -name '*.c')
FILES="${FILES//.\//}"
for i in $FILES; do
	printf ' \\\n\t%s' "${i/%.c/.o}" >>Makefile
done

cat <<'EOF' >>Makefile


default: libgenie.a libgenie.so
libgenie.a: $(OBJECTS)
	ar -cr libgenie.a $(OBJECTS)
libgenie.so: $(OBJECTS)
	$(CC) -shared -Wl,-soname,libgenie -o libgenie.so $(OBJECTS)
EOF
if [ "$DEP" == yes ]; then
	for i in $FILES; do
		printf '%s\n\t$(CC) -c %s -o $@ $(CFLAGS)\n' "$(cpp -MM $CFLAGS $LDLIBS "$i")" "$i" >>Makefile
	done
else
cat <<'EOF' >>Makefile
%.o: %.c
	$(CC) -c $< -o $@ $(CFLAGS)
EOF
fi
# embed font in library
if [ "$embedfont" == no ]; then
cat <<EOF >>Makefile
font.o: font.png
	$LD -r -b binary -o font.o font.png
EOF
fi
cat <<'EOF' >>Makefile
clean:
	rm -f libgenie.a libgenie.so
	rm -f $(OBJECTS)
EOF
