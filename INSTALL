BUILDING THE GAME

For any new readers, you should try to compile empires/empiresx using CMake,
since this one is actively maintained.

Change directory to empiresx:

  cd empiresx/

You can build the game using:

  cmake .
  make

Or if you prefer running it in parallel:

  cmake .
  make -j8

Where `-j8' means `use 8 cores'.

If you want to use the standalone server exclusively on a server with no
graphical display (e.g. on a VPS running linux), you should configure cmake
using:

  cmake -DHEADLESS=1 .

INSTALLING THE GAME

After inserting an original AoE CD-ROM, the game should automatically find all
the necessary files. You can also build an ISO image from the original CD-ROM.
The provided setup program is not necessary to run in order to play the game.

INSTALLATION RECIPIES

NOTE: Since libfreetype does not properly support the original fonts, the game
engine requires prerendered fonts. This has to be done either using wine or on a
real windows machine. See reverse_engineering/font.c and tools/font/font.c

The following fonts are needed:

fnt_default.png: Arial 13pt regular
fnt_button.png : Copperplate Gothic Light 16pt bold
fnt_large.png  : Copperplate Gothic Light 28pt bold

After prerendering them, you have to manually enter all data generated by
tools/font/font.c and store this information in genie/fnt_data.c. Yes, this
process is cumbersome, but we can't provide the fonts directly because they are
copyrighted by Microsoft, so you need to have the original game.

Xubuntu 18:

This project has been built primarly on Xubuntu 18 and Windows. The following
packages are needed:

  gcc make libssl-dev pkg-config libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libopenal-dev xtcommon

Windows:

Currently, empires.exe and most tools are known to compile and run successfully.
Both can be compiled either with a native MinGW toolchain or within cygwin with
its MinGW cross-compiler. Depending on your toolchain, you probably need to
specify custom environment variables to make everything correctly.

All dependencies can be downloaded from libsdl.org. You don't have to compile
these as long as you are using MinGW or Microsoft's Visual C++ Compiler (or any
other compiler that supports the provided binaries).

When running make with a cross compiler or MinGW, you also have to specify
CROSS_COMPILE=1 or CROSS_COMPILE=32 if you want to build a 32-bit executable.
